B-SUP 命令一覧
-------------------------------------------------------------------------------
CALL SC15

引数:
	なし

機能:
	SCREEN 1.5 にする。

-------------------------------------------------------------------------------
CALL VFIL( <VRAM address>, <size>, <fill data> )

引数:
	<VRAM address> ..... VRAMアドレス
	<size> ............. Byte数
	<fill data> ........ 敷き詰める 1byte の値

機能:
	VRAM のアドレス <VRAM address> から <size> byte だけ <fill data> を詰める。

-------------------------------------------------------------------------------
CALL PCG0( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の PCG番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	上段のPCGを定義する。

-------------------------------------------------------------------------------
CALL PCG1( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の PCG番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	中段のPCGを定義する。

-------------------------------------------------------------------------------
CALL PCG2( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の PCG番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	下段のPCGを定義する。

-------------------------------------------------------------------------------
CALL PCG3( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の PCG番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	上中下段のPCGをまとめて定義する。

-------------------------------------------------------------------------------
CALL COL0( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の COL番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	上段のCOLORを定義する。

-------------------------------------------------------------------------------
CALL COL1( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の COL番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	中段のCOLORを定義する。

-------------------------------------------------------------------------------
CALL COL2( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の COL番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	下段のCOLORを定義する。

-------------------------------------------------------------------------------
CALL COL3( <char number>, <pattern string> )

引数:
	<char number> ...... 0〜255 の COL番号を指定する
	<pattern string> ... 16進数ダンプ形式のパターン定義文字列

機能:
	上中下段のCOLORをまとめて定義する。

-------------------------------------------------------------------------------
CALL BFNT

引数:
	なし

機能:
	太字フォントをセットする。

-------------------------------------------------------------------------------
CALL SDRV( <mode> )

引数:
	<mode> .... 0 か 1 を指定する。

機能:
	SpriteDriver を ON/OFF する。0 で OFF, 1 で ON。
	デフォルトは OFF。
	SpriteDriver 稼働中は、VRAMアクセスする BASIC命令の大半が正常動作しなくなる。
	例えば、CLS や PRINT や LIST など。PRINT 等で下端に文字を表示後スクロールすると、
	画面にゴミが出たりする。
	BASICから呼ばれる BIOS の構造と、SpriteDriverの相性が悪いために起こる問題で
	回避不可能。そのため、BASICのそれら命令を使う前に OFF できるようにこの命令を
	設置した。

-------------------------------------------------------------------------------
CALL SPUT( <Sprite#>, <X座標>, <Y座標>, <Sprite Pattern#>, <Color> )

引数:
	<Sprite#> ........... スプライト番号 (0〜31)
	<X座標> ............. X座標
	<Y座標> ............. Y座標
	<Sprite Pattern#> ... スプライトパターン番号 (0〜255)
	<Color> ............. 色 (0〜15)

機能:
	B-SUP内のスプライト番号に対応するスプライトを、指定の (X,Y)座標に表示する。
	VDPのスプライト番号 (0〜31) とは無関係で、B-SUP が内部で自動的に 
	B-SUP内のスプライト番号 を VDPのスプライト番号 に割り付ける。
	この割り付けは、1/60秒間隔の割り込み内で都度変化する。
	水平5個以上のスプライトが並んだ場合に、点滅でかろうじて見えるようにする仕組み
	を実現するために、この再割り付けを行っている。
	移動ベクトルは 0 にクリアされる。
	CALL SDRV(1) を実行しておく必要がある。

-------------------------------------------------------------------------------
CALL SMOV( <Sprite#>, <X方向移動量>, <Y方向移動量>, <加算回数> )

引数:
	<Sprite#> ...... スプライト番号 (0〜31)
	<X方向移動量> .. X方向移動量 (小数部7bit)
	<Y方向移動量> .. Y方向移動量 (小数部7bit)
	<加算回数> ..... 加算回数 (0〜255)

機能:
	B-SUP内のスプライト番号に対応するスプライトに対して、指定の移動ベクトルを指定する。
	非表示のスプライト番号を指定すると、値を設定するのみで、表示すると同時に移動開始する。
	表示中のスプライト番号を指定すると、移動ベクトルを即座に変更する。
	1/60秒に1回、移動ベクトル ( X方向移動量, Y方向移動量 ) を加算する。
	X方向移動量及びY方向移動量は、小数部7bit あるため、128で 1の扱いである。64は 0.5 の扱い。
	128 を指定すると、1秒間に 60ドット移動し、64 を指定すると、1秒間に 30ドットの移動になる。
	正の値を指定すると右・下へ移動。負の値を指定すると左・上へ移動となる。
	画面外にでた場合は、その時点でそのスプライトは非表示に変化する。
	CALL SDRV(1) を実行しておく必要がある。

-------------------------------------------------------------------------------
CALL STOW( <Sprite#>, <X終点座標>, <Y終点座標>, <速度> )		★まだ未実装

引数:
	<Sprite#> ...... スプライト番号 (0〜31)
	<X終点座標> .... X終点座標
	<Y終点座標> .... Y終点座標
	<速度> ......... 移動速度 (小数部7bit, 1〜128)

機能:
	B-SUP内のスプライト番号に対応するスプライトに対して、指定の移動ベクトルを指定する。
	非表示のスプライト番号を指定すると、値を設定するのみで、表示すると同時に移動開始する。
	表示中のスプライト番号を指定すると、移動ベクトルを即座に変更する。
	1/60秒に1回、移動ベクトル ( X方向移動量, Y方向移動量 ) を加算する。
	X方向移動量及びY方向移動量は、小数部7bit あるため、128で 1の扱いである。64は 0.5 の扱い。
	128 を指定すると、1秒間に 60ドット移動し、64 を指定すると、1秒間に 30ドットの移動になる。
	正の値を指定すると右・下へ移動。負の値を指定すると左・上へ移動となる。
	画面外にでた場合は、その時点でそのスプライトは非表示に変化する。
	CALL SDRV(1) を実行しておく必要がある。

-------------------------------------------------------------------------------
CALL SSEE( <Sprite#>, <整数変数名> )

引数:
	<Sprite#> ...... スプライト番号 (0〜31)
	<整数変数名> ... 結果格納先変数名

機能:
	B-SUP内のスプライト番号が、表示中か否かを 整数変数名 の変数に格納する。
	0 = 非表示, 1 = 表示中, 2 = 連結中

-------------------------------------------------------------------------------
CALL SSTP( <mode> )

引数:
	<mode> .... 0 か 1 を指定する。

機能:
	SpriteDriver の スプライト自動移動機能を ON/OFF する。1 で STOP, 0 で ACTIVE。
	デフォルトは ACTIVE。
	複数のスプライトを自動移動させる場合に、2つ目以降の動きを指定している間に
	1つ目が動き始めてしまうのを防ぐ目的で利用する。
	STOP の間は一時停止状態なので、この状態のまますべての動きを設定して、
	ACTIVE に切り替えると、一斉に動き出す。

-------------------------------------------------------------------------------
CALL BCLS

引数:
	なし

機能:
	CLS と同じ。
	ただし、CALL SDRV(1) を実行して SpriteDriver が有効になっている状態でも
	正常に機能する。
